import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { ApiProperty } from '@nestjs/swagger';
import { IsString } from 'class-validator';
import { SchemaTypes } from 'mongoose';

import { TimeManagement } from '@/application/utils/Time/timezone';

export type CallbackPostpaidDocument = CallbackPostpaid & Document;

@Schema({ collection: 'transaction_postpaid_callback' })
export class CallbackPostpaid {
  @ApiProperty({
    required: true,
    type: String,
    example: 'TRX_0000-00-00_xxxxxxxxxxxxx',
    description: `Transaction id`,
  })
  @IsString()
  @Prop({ type: SchemaTypes.String, required: true })
  trxid: string;

  @ApiProperty({
    required: true,
    type: String,
    example: '628XXXX',
    description: `Subscriber MSISDN`,
  })
  @IsString()
  @Prop({ type: SchemaTypes.String, required: true })
  msisdn: string;

  @ApiProperty({
    required: false,
    type: String,
    example: '',
    description: `Order ID generated by OMS`,
  })
  @IsString()
  @Prop({ type: SchemaTypes.String, required: false })
  orderid: string;

  @ApiProperty({
    required: false,
    type: String,
    example: '',
    description: `Status of order. LOV: 'Submitted | To Be Cancelled`,
  })
  @IsString()
  @Prop({ type: SchemaTypes.String, required: false })
  orderstatus: string;

  @ApiProperty({
    required: false,
    type: String,
    example: '',
    description: `Error Code. Only passed if orderstatus is not Submitted (Successfull)`,
  })
  @IsString()
  @Prop({ type: SchemaTypes.String, required: false })
  errorcode: string;

  @ApiProperty({
    required: false,
    type: String,
    example: '',
    description: `Error Message. Only passed if orderstatus is not Submitted (Successfull)`,
  })
  @IsString()
  @Prop({ type: SchemaTypes.String, required: false })
  errormessage: string;

  @Prop({
    type: SchemaTypes.Date,
    default: () => new TimeManagement().getTimezone('Asia/Jakarta'),
  })
  created_at: Date;

  @Prop({
    type: SchemaTypes.Date,
    default: () => new TimeManagement().getTimezone('Asia/Jakarta'),
  })
  updated_at: Date;

  @Prop({ type: SchemaTypes.Mixed, default: null })
  deleted_at: Date | null;

  @Prop({ type: Object, default: null, required: false })
  refund: object;

  @Prop({ type: Object, default: null, required: false })
  payload: object;

  constructor(
    trxid: string,
    msisdn: string,
    orderid?: string,
    orderstatus?: string,
    errorcode?: string,
    errormessage?: string,
    payload?: object,
  ) {
    this.trxid = trxid;
    this.msisdn = msisdn;
    this.orderid = orderid;
    this.orderstatus = orderstatus;
    this.errorcode = errorcode;
    this.errormessage = errormessage;
    this.payload = payload;
  }
}

export const PostpaidCallbackSchema =
  SchemaFactory.createForClass(CallbackPostpaid);
