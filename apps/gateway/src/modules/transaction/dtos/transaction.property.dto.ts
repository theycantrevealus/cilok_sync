import { FmcIdenfitiferType } from './point/fmc.member.identifier.type';

const ApiOperationTransaction = {
  standard_format: {
    summary: '',
    description: '',
  },
  primeDT: {
    summary: 'Show all example item',
    description: `<table><tr><td>first<br/><i>Offsetofdata</i></td><td>:</td><td><b>number</b></td></tr><tr><td>rows<br/><i>Limitdatainpage</i></td><td>:</td><td><b>number</b></td></tr><tr><td>sortField<br/><i>Fieldtobesort</i></td><td>:</td><td><b>string</b></td></tr><tr><td>sortOrder<br/><i>1isascending.-1isdescending</i></td><td>:</td><td><b>number</b></td></tr><tr><td>filters</td><td>:</td><td><b>object</b><br/><table><tr><td>column_name_1<br/><i>Nameofcolumntobesearched</i></td><td>:</td><td><b>object</b><table><tr><td>matchMode</td><td>:</td><td><b>string</b><br/>Onlyfilledbyfollowingitem:<ul><li><b>contains</b><br/>Willsearchalldataifcolumn_name_1containsthevalue<br/></li><li><b>notContains</b><br/>Willsearchalldataifcolumn_name_1notcontainsthevalue<br/></li><li><b>startsWith</b><br/>Willsearchalldataifcolumn_name_1startswiththevalue<br/></li><li><b>endsWith</b><br/>Willsearchalldataifcolumn_name_1endswiththevalue<br/></li><li><b>equals</b><br/>Willsearchalldataifcolumn_name_1equalstothevalue<br/></li><li><b>notEquals</b><br/>Willsearchalldataifcolumn_name_1notequalstothevalue<br/></li></li></td></tr><tr><td>value</td><td>:</td><td><b>string</b></td></tr></table></td></tr><tr><td>column_name_2<br/><i>Nameofcolumntobesearched</i></td><td>:</td><td><b>object</b><table><tr><td>matchMode</td><td>:</td><td><b>string</b><br/>Onlyfilledbyfollowingitem:<ul><li><b>contains</b><br/>Willsearchalldataifcolumn_name_2containsthevalue<br/></li><li><b>notContains</b><br/>Willsearchalldataifcolumn_name_2notcontainsthevalue<br/></li><li><b>startsWith</b><br/>Willsearchalldataifcolumn_name_2startswiththevalue<br/></li><li><b>endsWith</b><br/>Willsearchalldataifcolumn_name_2endswiththevalue<br/></li><li><b>equals</b><br/>Willsearchalldataifcolumn_name_2equalstothevalue<br/></li><li><b>notEquals</b><br/>Willsearchalldataifcolumn_name_2notequalstothevalue<br/></li></li></td></tr><tr><td>value</td><td>:</td><td><b>string</b></td></tr></table></td></tr></table></td></tr></table>`,
  },
  check_transaction: {
    summary: 'Check Valid Transaction For Telco Product',
    description:
      'This API used to validate transaction come from SmileLoyalty system',
  },
  reward_catalogue_by_subscriber: {
    summary: 'Reward catalgue by subsriber',
    description:
      'This API will return list of reward catalogue based on subscriber point and transactio.',
  },
  get_reward_catalogue_xml: {
    summary: 'Get Reward catalogue xml',
    description: '',
  },
};

const ApiQueryTransaction = {
  primeDT: {
    name: 'lazyEvent',
    type: String,
    example:
      '{"first":0,"rows":10,"sortField":"created_at","sortOrder":1,"filters":{}}',
    description: `Format: Prime default param<br />`,
    required: false,
  },
  bucket_type: {
    required: false,
    name: 'bucket_type',
    type: String,
    description: `Type of bucket, by default Telkomsel Poin. LOV will be shown as follow :<div>
      <div>
      a. TelkomselPOIN</br>
      b. Poku</br>
      </div>
      <div>By Default will be send asTelkomselPOIN</div>`,
  },
  locale: {
    required: false,
    example: 'en-US',
    name: 'locale',
    type: String,
    description: `en-US`,
  },
  msisdn: {
    required: true,
    example: '',
    name: 'msisdn',
    type: String,
    description: `Subscriber MSISDN`,
  },
  trxid: {
    required: true,
    example: '',
    name: 'trxid',
    type: String,
    description: `Transaction ID.`,
  },
  orderid: {
    required: false,
    example: '',
    name: 'orderid',
    type: String,
    description: `Order ID generated by OMS.`,
  },
  city: {
    required: false,
    example: '',
    name: 'city',
    type: String,
    description: `City Name`,
  },
  amount: {
    required: false,
    example: '',
    name: 'amount',
    type: String,
    description: `Amount of Payment or Recharge`,
  },
  orderstatus: {
    required: false,
    example: '',
    name: 'orderstatus',
    type: String,
    description: `Status of order.
      LOV: </br>
      • Submitted
      • To Be Cancelled`,
  },
  errorcode: {
    required: false,
    example: '',
    name: 'errorcode',
    type: String,
    description: `Error Code. Only passed if orderstatus is not Submitted (Successful).`,
  },
  errormessage: {
    required: false,
    example: '',
    name: 'errormessage',
    type: String,
    description: `Error Message. Only passed if orderstatus is not Submitted (Successful).`,
  },
  ref_transaction_id: {
    required: true,
    example: '',
    name: 'ref_transaction_id',
    type: String,
    description: `Orginal transaction id / trace id`,
  },
  transaction_id: {
    required: false,
    name: 'transaction_id',
    type: String,
    description: `Channel transaction id`,
  },
  sleep: {
    required: false,
    name: 'sleep',
    type: Number,
    description: `Sleep time before hit the api`,
  },
  channel_id: {
    required: false,
    name: 'channel_id',
    type: String,
    description: `Channel information from source application.</br> Reference to List Channel From Legacy for Program Creation.`,
  },
  filter: {
    required: false,
    name: 'filter',
    type: String,
    description: `<div>Return only data matching to filter : { "code": "X", "name": "Y" }</div>`,
  },
  additional_param: {
    required: false,
    name: 'additional_param',
    type: String,
    description: `<div>Additional parameter if needed, with format : { "code": "X", "name": "Y" }</div>`,
  },
  limit: {
    name: 'limit',
    type: Number,
    required: false,
    default: 10,
    description: `Limit record, default is last 5 records ( configurable )`,
  },
  skip: {
    name: 'skip',
    type: Number,
    required: false,
    default: 0,
    description: `Offset data, will start record after specified value.`,
  },
  from: {
    required: false,
    name: 'from',
    type: String,
    description: `Start date with format YYYY-MM-DD`,
  },
  to: {
    required: false,
    name: 'to',
    type: String,
    description: `Start date with format YYYY-MM-DD`,
  },
  type: {
    required: true,
    name: 'type',
    type: String,
    default: 'INJECT',
    description: `Available LOV :
      <p>a. REDEEM :  Addition</p>
      <p>b. INJECT :  Deduction</p>`,
  },
  program_id: {
    required: false,
    name: 'program_id',
    type: String,
    description: `Program Id ( Need one of parameter Program Id or Keyword )`,
  },
  keyword: {
    required: false,
    name: 'keyword_id',
    type: String,
    description: `Keyword Linked by Program Id ( Need one of parameter Program Id or Keyword )`,
  },
  keyword_primary: {
    required: false,
    name: 'keyword',
    type: String,
    description: `Keyword`,
  },
  voucher_status: {
    required: false,
    name: 'voucher_status',
    type: String,
    description: `Voucher Status : Redeem ( R ) or Verified ( V ) </br> If variable not send, will return both redeem and verified voucher`,
  },
  identifier: {
    required: true,
    enum: FmcIdenfitiferType,
    default: FmcIdenfitiferType.MSISDN,
    example: FmcIdenfitiferType.MSISDN,
    description: `Type of customer identifier, by default msisdn <br>
    Type will be shown as follow : <br>
    a.	MSISDN <br>
    b.  INDIHOME <br>
    c.  TSELID
    By Default will be send as MSISDN 
    `,
  },
};

const ApiParamTransaction = {
  msisdn: {
    name: 'msisdn',
    type: String,
    required: true,
    description: `Subscriber number`,
  },
  keyword: {
    name: 'keyword',
    type: String,
    required: true,
    description: `Keyword`,
  },
};

export { ApiOperationTransaction, ApiParamTransaction, ApiQueryTransaction };
